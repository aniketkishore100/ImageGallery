{"version":3,"sources":["Components/Search.js","Components/Banner.js","Components/Header.js","Components/Loader.js","Components/CustomMasonry.js","Components/Gallery.js","App.js","reportWebVitals.js","index.js"],"names":["Search","props","text","useRef","className","type","ref","placeholder","onClick","e","onChange","current","value","Banner","href","alt","src","handleChange","Header","useState","scrollPos","setscrollPos","show","setShow","useEffect","window","addEventListener","handleScroll","removeEventListener","document","body","getBoundingClientRect","top","Loading","CustomMasonry","breakpointCols","defaut","columnCount","setColumnCount","reCalculateColumnCount","reCalculateColumnCountDebounce","requestAnimationFrame","windowWidth","innerWidth","Infinity","breakpointMatch","columns","default","breakpoint","breakpointOpt","parseInt","Math","max","childrenInColumns","itemsInColumns","Array","i","children","length","columnIndex","push","ColumnContent","columnAttributes","style","width","columnClassName","map","items","key","renderColumns","Gallery","1000","500","images","imageObj","farm","server","id","secret","App","search","setValue","pageCount","setCount","setImage","fetchContent","newValue","apiRoot","process","axios","get","then","res","data","photos","photo","dataLength","next","hasMore","loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.96925a4b.chunk.js","sourcesContent":["import { React, useRef } from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\n\n\n\nexport const Search = (props) => {\n\n  const text = useRef(\"\"); //references to the current state of the search bar\n  function handleChange(e) {\n    props.onChange(text.current.value)\n  }\n  return (\n\n    <center>\n      <div className='container d-flex justify-content-center'>\n        <div className=\"input-group mb-3 \">\n          <input type=\"text\" ref={text} className=\"form-control custom-search\" placeholder=\"Search free high resolution photos\" />\n          <div className=\"input-group-append\">\n            <button className=\"btn custom-btn\" onClick={handleChange}><SearchIcon /></button>\n          </div>\n        </div>\n      </div>\n    </center>\n  )\n\n}","import React from 'react';\nimport {Search} from './Search'\n\nexport const Banner = (props) => {\n    return (\n        <div className='container-fluid header mb-5'>\n            <div className='row '>\n                <div className='col-1'>\n                    <a href=\"/\">\n                <img alt=\"banner logo\"src=\"../logo.png\"></img>\n                </a>\n                </div>\n            </div>\n            <div className='row'>\n                <div className='col-12 mb-auto'>\n                    <h2 className='title display-2'>Gallery</h2>\n                </div>\n            </div>\n            <div className='row'>\n                <div className='col-12'>\n                <Search value = {props.value} onChange={props.handleChange}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\n// export default Header;","import { React, useEffect, useState } from 'react';\nimport { Search } from './Search'\nexport const Header = (props) => {\n    const [scrollPos, setscrollPos] = useState(0)\n    const [show, setShow] = useState(true)\n\n    useEffect(() => {\n        window.addEventListener('scroll', handleScroll) //on component Mount\n\n        return () => {\n            window.removeEventListener('scroll', handleScroll) //on component Unmount\n        }\n    }, [])\n    const handleScroll = () => {\n        setscrollPos(document.body.getBoundingClientRect().top)\n        setShow(document.body.getBoundingClientRect().top > scrollPos - 290) //threshold limit after which the navbar should be visible\n    }\n    return (\n        <div className={show ? 'nav-hidden' : 'nav-active'}> \n            <div className=\"container-fluid custom-nav\">\n                <div className=\"mt-2 mr-3 navbar-search\">\n                    <Search value={props.value} onChange={props.handleChange} />\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport const Loading = () => {\n    return (\n        <div className=\"loadingio-spinner-ellipsis-mooxcqql2ek\">\n            <div className=\"ldio-hl03nm3jts6\">\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n        </div>\n    );\n}\n","import {React,useState,useEffect} from 'react';\n\nexport const CustomMasonry = (props)=> {\n  const [columnCount,setColumnCount] = useState(props.breakpointCols.defaut);\n\n  useEffect(()=>{ //on Component mount\n    reCalculateColumnCount();\n    window.addEventListener('resize',reCalculateColumnCountDebounce);\n\n    return ()=>{ //on Component Unmount\n      window.removeEventListener('resize', reCalculateColumnCountDebounce);\n    }\n\n  })\n\n  useEffect(()=>{ //whenever state columnCount changes\n    reCalculateColumnCount();\n  },[columnCount])\n\n  const reCalculateColumnCountDebounce=()=> { //calls reCalculateColumnCount function after a certain period of event halt\n    const lastRecalculateAnimationFrame = window.requestAnimationFrame(() => {\n      reCalculateColumnCount();\n    });\n  }\n\n  const reCalculateColumnCount=()=> { // responsible for switching to Breakpoints with respect to size of window\n    const windowWidth = window && window.innerWidth || Infinity;\n\n    let breakpointMatch = Infinity; //threshold BreakPoint\n    let columns = props.breakpointCols.default //columns set to default provided through the props\n\n    for(let breakpoint in props.breakpointCols) {\n      const breakpointOpt = parseInt(breakpoint);\n      const isCurrentBreakpoint = breakpointOpt > 0 && windowWidth <= breakpointOpt; //checks if current window width is in the current default range\n\n      if(isCurrentBreakpoint && breakpointOpt < breakpointMatch) { //if current width crosses the threshold resolution\n        breakpointMatch = breakpointOpt;  //change the threshold width\n        columns = props.breakpointCols[breakpoint]; // reset the columns according to new threshold\n      }\n    }\n\n    columns = Math.max(1, parseInt(columns) || 1);\n\n    if(columnCount !== columns) {\n      setColumnCount(columns)\n    }\n  }\n\n  const ColumnContent=()=> { //maps each item of the grid to Column number from 0 to column-1\n    const itemsInColumns = new Array(columnCount);\n\n    for (let i = 0; i < props.children.length; i++) {\n      const columnIndex = i % columnCount;\n\n      if(!itemsInColumns[columnIndex]) { //if current position in the array is empty \n        itemsInColumns[columnIndex] = []; //initialize with an empty array inside the itemsInColumns array\n      }\n\n      itemsInColumns[columnIndex].push(props.children[i]); //if already has empty nested array pushes the Column number i into the array\n    }\n\n    return itemsInColumns;\n  }\n\n  const renderColumns=()=> {\n    const childrenInColumns = ColumnContent(); //array of arrays\n    const columnWidth = `${100 / childrenInColumns.length}%`;\n    let className = props.columnClassName;\n\n\n    const columnAttributes = {\n      style: {     \n        width: columnWidth\n      },\n      className\n    };\n    return childrenInColumns.map((items, i) => {\n      return <div {...columnAttributes} key={i}>\n        {items}\n      </div>;\n    });\n  }\n\n    return (\n      <div className={props.className}>\n        {renderColumns()}\n      </div>\n    );\n}\n","import React from 'react';\nimport { CustomMasonry } from './CustomMasonry';\n\nexport const Gallery = (props) => {\n\n    const breakPoints = { //breakpoints from responsiveness\n        default: 3,\n        1000: 2,\n        500: 1\n    };\n    return (\n\n        <CustomMasonry breakpointCols={breakPoints} className=\"grid\" columnClassName=\"item\">\n            {props.images.map(imageObj => (\n                <div>\n                    <img className=\"grid-image\" alt=\"\" key={imageObj.id} src={`https://farm${imageObj.farm}.staticflickr.com/${imageObj.server}/${imageObj.id}_${imageObj.secret}.jpg`} />\n                </div>\n            ))}\n        </CustomMasonry>\n\n    )\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport { Banner } from './Components/Banner'\nimport { Header } from './Components/Header'\nimport { Loading } from './Components/Loader'\nimport { Gallery } from './Components/Gallery'\nimport InfiniteScroll from 'react-infinite-scroll-component'\n\nimport axios from 'axios'\n\nfunction App() {\n  const [search, setValue] = useState(\"searchText\"); //search value \n  const [pageCount, setCount] = useState(1); \n  const [images, setImage] = useState([]); //image array\n\n  useEffect(() => {//Updating Component on mount\n    fetchContent(); \n  },[]) \n\n  useEffect(()=>{  //Updating Component whenever Search state changes\n    fetchContent()\n  },[search])\n\n\n  const handleChange = (newValue) =>{\n    setImage([]) //clears image array\n    setValue(newValue); //stores new value to seach\n    setCount(1); //resets pageCount\n  }\n\n  const fetchContent = ()=>{\n    setCount(pageCount+1); //increments pageCount on scroll\n    const accessKey = process.env.REACT_APP_ACCESSKEY;\n    var apiRoot = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${accessKey}&text=:${search}&media=photos&per_page=15&page=${pageCount}&format=json&nojsoncallback=1`\n    axios.get(apiRoot)\n      .then(res => setImage([...images, ...res.data.photos.photo])); //pushes new set of 15 images into image array\n  }\n  return (\n    <div className=\"App\">\n      <div>\n        <Header value={search} handleChange={handleChange}/>\n        <Banner value={search} handleChange={handleChange}/>\n        <InfiniteScroll dataLength={images.length} next={fetchContent} hasMore={true} loader={ <Loading />}>\n        <Gallery images = {images}/>\n        </InfiniteScroll>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}